

#include <avr/interrupt.h>
#include <avr/power.h>
#include <avr/sleep.h>
#include <avr/io.h>
#include <avr/wdt.h>
#include <avr/pgmspace.h>

const byte interruptPin = 2;
const byte reverseStopPin = 8;
const byte forwardPin = 6;
const byte backwardPin = 5;

void setup()
{
  // put your setup code here, to run once:
  Serial.begin(9600);
  pinMode(forwardPin, OUTPUT);
  pinMode(backwardPin, OUTPUT);
  pinMode(interruptPin, INPUT_PULLUP);
  pinMode(reverseStopPin, INPUT_PULLUP);
  randomSeed(analogRead(0));
  Serial.print("***********************\n");
  Serial.print("Ready\n");
}

void loop()
{
  // digitalWrite(ledPin, LOW);
  Serial.print("Sleepy Time\n");
  delay(500);
  sleepNow(); // Call the sleep routine: sleepNow()
  Serial.print("Good Morning\n");
  if (!digitalRead(interruptPin))
  {
    delay(random(1000));
    forwardMovement();
    delay(random(1000));
    backwardMovement();
  }
}

void move(int dir)
{
  switch (dir)
  {
  case 1:
    analogWrite(backwardPin, 0);
    analogWrite(forwardPin, 255);
    break;
  case -1:
    analogWrite(backwardPin, 255);
    analogWrite(forwardPin, 0);
    break;
  default:
    analogWrite(backwardPin, 0);
    analogWrite(forwardPin, 0);
    break;
  }
}

void forwardMovement()
{
  switch (random(3))
  {
  case 0:
    forwardMovement1();
    break;
  case 1:
    forwardMovement2();
    break;
  case 2:
    forwardMovement3();
    break;
  }
  // forwardMovement2();
}

void forwardMovement1()
{
  // Simple movement that mimics the
  // original simple circuit
  Serial.println("Triggering Movement 1");
  move(1);
  while (!digitalRead(interruptPin))
  {
    delay(10);
  }
  move(0);
}

void forwardMovement2()
{
  // Creep out a little bit, pause and then continue
  Serial.println("Triggering Movement 2");
  move(1);
  delay(300);
  move(0);
  delay(random(2000));
  move(1);
  while (!digitalRead(interruptPin))
  {
    delay(10);
  }
  move(0);
}

void forwardMovement3()
{

  Serial.println("Triggering Movement 3");
  for (int i = 0; i < 10; i++)
  {
    move(1);
    delay(300);
    move(-1);
    delay(300);
  }
  move(1);
  while (!digitalRead(interruptPin))
  {
    delay(10);
  }
  move(0);
}

void backwardMovement()
{
  move(-1);

  while (digitalRead(reverseStopPin) == HIGH)
  {
    delay(100);
  }
  move(0);
}

// Wakeup routine, triggered by the PIR (movement sensor) connected on pin 2
void Wakeup_Routine()
{
  sleep_disable();
  detachInterrupt(digitalPinToInterrupt(interruptPin));
}

void sleepNow()
{
  cli();                                                                         // disable interrupts
  sleep_enable();                                                                // enables the sleep bit in the mcucr register
  attachInterrupt(digitalPinToInterrupt(interruptPin), Wakeup_Routine, FALLING); // wake up on RISING level on D2
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  ADCSRA = 0;          // disable the ADC
  sleep_bod_disable(); // save power
  sei();               // enable interrupts
  sleep_cpu();         // here the device is put to sleep
}
